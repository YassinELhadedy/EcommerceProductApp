version: 2.1
references:
  ## Workspaces
  workspace: &workspace
               ~/src

  gcloud_config: &gcloud_config
    working_directory: *workspace
    docker:
      - image: google/cloud-sdk:latest
    environment:
      TERM: dumb

  attach_debug_workspace: &attach_debug_workspace
    attach_workspace:
      at: *workspace
  attach_release_workspace: &attach_release_workspace
    attach_workspace:
      at: *workspace
  persist_debug_workspace: &persist_debug_workspace
    persist_to_workspace:
      root: .
      paths:
        - .

  persist_firebase_workspace: &persist_firebase_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - firebase

  ## Docker image configurations
  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-30-node
        auth:
          username: yassinelhadedy
          password: $DOCKERHUB_PASSWORD
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx3200m"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'


  # Google Cloud Service

  export_gcloud_key: &export_gcloud_key
    run:
      name: Export Google Cloud Service key environment variable
      command: echo 'export GCLOUD_SERVICE_KEY="$GCLOUD_SERVICE_KEY"' >> $BASH_ENV
  decode_gcloud_key: &decode_gcloud_key
    run:
      name: Decode Google Cloud credentials
      command: echo $GCLOUD_SERVICE_KEY > ${HOME}/client-secret.json

  # Google Services

  export_gservices_key: &export_gservices_key
    run:
      name: Export Google Services key environment variable
      command: echo 'export GOOGLE_SERVICES_KEY="$GOOGLE_SERVICES_KEY"' >> $BASH_ENV
  decode_gservices_key: &decode_gservices_key
    run:
      name: Decode Google Services key
      command: echo $GOOGLE_SERVICES_KEY > google-services.json


  ## Cache
  gradle_key: &gradle_key
                jars-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}

  gems_key: &gems_key
              gems-{{ checksum "Gemfile.lock" }}

  restore_gradle_cache: &restore_gradle_cache
    restore_cache:
      key: *gradle_key

  restore_gems_cache: &restore_gems_cache
    restore_cache:
      key: *gems_key

  save_gradle_cache: &save_gradle_cache
    save_cache:
      key: *gradle_key
      paths:
        - ~/.gradle
        - ~/.m2

  save_gems_cache: &save_gems_cache
    save_cache:
      key: *gems_key
      paths:
        - vendor/bundle


  cache_sonarQube_packages: &cache_sonarQube_packages
    save_cahce:
      path: ~/.sonar/cache
      key: ${{ runner.os }}-sonar
      restore-keys: ${{ runner.os }}-sonar


  cache_gradle_packages: &cache_gradle_packages
    save_cahce:
      path: ~/.gradle/caches
      key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      restore-keys: ${{ runner.os }}-gradle


  ## Dependencies
  ruby_dependencies: &ruby_dependencies
    run:
      name: Download Ruby Dependencies
      command: bundle check || bundle install --path vendor/bundle

  android_dependencies: &android_dependencies
    run:
      name: Download Android Dependencies
      command: ./gradlew androidDependencies

jobs:
  ## Run unit tests
  test_unit:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *ruby_dependencies
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - run:
          name: Run unit tests
          command: bundle exec fastlane unit_tests
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/
      - store_test_results:
          path: app/build/test-results/
          destination: /test-results/

  test_unit_sonar:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *ruby_dependencies
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - run:
          name: Run unit tests
          command: ./gradlew clean testDebugUnitTest
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/
      - store_test_results:
          path: app/build/test-results/
          destination: /test-results/

  #  ## Run instrumentation tests
  #  test_instrumentation:
  #    <<: *android_config
  #    steps:
  #      - checkout
  #      - *restore_gradle_cache
  #      - *restore_gems_cache
  #      - *ruby_dependencies
  #      - *android_dependencies
  #      - *save_gradle_cache
  #      - *save_gems_cache
  #      # Since we will download a video, we require integrity checking with CRC32c
  #      # But the crcmod installation in the docker image isn't using the module's C extension
  #      # So, uninstall it and install again with the C extension
  #      - run:
  #          name: Uninstall crcmod
  #          command: echo "y" | sudo pip uninstall crcmod
  #      - run:
  #          name: Install crcmod
  #          command: sudo pip install -U crcmod
  #      - run:
  #          name: Run instrumentation tests in Firebase testlab
  #          command: bundle exec fastlane instrumentation_tests_testlab
  #      #          command: sudo gcloud firebase test android run --app app/build/outputs/apk/debug/app-debug.apk --test app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk --results-bucket cloud-test-${GOOGLE_PROJECT_ID}
  #      - store_artifacts:
  #          path: firebase/
  #          destination: /firebase/

  test_instrumented:
    <<: *gcloud_config
    steps:
      - *attach_debug_workspace
      - *export_gcloud_key
      - *decode_gcloud_key
      - run:
          name: Set Google Cloud target project
          command: gcloud config set project ecommerce-35eeb
      - run:
          name: Authenticate with Google Cloud
          command: gcloud auth activate-service-account firebase-adminsdk-4ltda@ecommerce-35eeb.iam.gserviceaccount.com --key-file ${HOME}/client-secret.json
      - run:
          name: Run instrumented test on Firebase Test Lab
          command: gcloud alpha firebase test android run --app app/build/outputs/apk/debug/app-debug.apk --test app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk --results-bucket cloud-test-${GOOGLE_PROJECT_ID}
      #          command: gcloud firebase test android run --type instrumentation --app mobile/build/outputs/apk/debug/mobile-debug.apk --test mobile/build/outputs/apk/androidTest/debug/mobile-debug-androidTest.apk --device model=sailfish,version=26,locale=en_US,orientation=portrait --environment-variables coverage=true,coverageFile=/sdcard/tmp/code-coverage/connected/coverage.ec --directories-to-pull=/sdcard/tmp --timeout 20m
      - run:
          name: Create directory to store test results
          command: mkdir firebase
      - run:
          name: Download instrumented test results from Firebase Test Lab
          command: gsutil -m cp -r -U "`gsutil ls gs://test-lab-3udbiqpdyp0d0-miwcp7d69v80m | tail -1`*" /root/workspace/firebase/
      - *persist_firebase_workspace
      - store_artifacts:
          path: firebase/
          destination: /firebase/


    ## Build debug APK and instrumented test APK

  build_debug:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *save_gradle_cache
      - *export_gservices_key
      - *decode_gservices_key
      - run:
          name: Gradle build (debug)
          command: ./gradlew assembleDebug
      - run:
          name: Gradle build android test(debug)
          command: ./gradlew assembleAndroidTest
      - *persist_debug_workspace
      - store_artifacts:
          path: mobile/build/outputs/apk/
          destination: /apk/


    ## Deploy to Crashlytics Beta
  deploy_crashlytics:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *ruby_dependencies
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - run:
          name: Deploy to Crashlytics Beta
          command: bundle exec fastlane deploy_to_crashlytics

  ## Deploy to Play Store
  deploy_play_store:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *ruby_dependencies
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - run:
          name: Deploy to Play Store
          command: bundle exec fastlane deploy_to_play_store

  #    ## Deploy to Appcenter
  #  deploy_app_center:
  #    <<: *android_config
  #    steps:
  #      - checkout
  #      - *restore_gradle_cache
  #      - *restore_gems_cache
  #      - *ruby_dependencies
  #      - *android_dependencies
  #      - *save_gradle_cache
  #      - *save_gems_cache
  #      - run:
  #          name: Deploy to AppCenter
  #          command: bundle exec fastlane deploy_to_appcenter

  deploy_app_firebase_dist:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *ruby_dependencies
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - run:
          name: Deploy to Firebase Dist
          command: bundle exec fastlane distribute

  deploy_app_firebase_dist_production_version:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *ruby_dependencies
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - run:
          name: Deploy production version to Firebase Dist
          command: bundle exec fastlane distribute_production_version
  #Analysis

  #  build_sonarqube_build:
  #    docker:
  #      - image: 'circleci/openjdk:11-jdk'
  #    steps:
  #      - checkout
  #      - *restore_gradle_cache
  #      - *restore_gems_cache
  #      - *ruby_dependencies
  #      - *android_dependencies
  #      - *save_gradle_cache
  #      - *save_gems_cache
  #      - run:
  #          name: Analyze on SonarCloud
  #          command: ./gradlew build sonarqube

  sonarqube_build:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *ruby_dependencies
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      #      - *cache_sonarQube_packages
      #      - *cache_gradle_packages
      - run:
          name: Sonarqube Build
          command: ./gradlew sonarqube -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN

workflows:
  on_feature_workflow:
    jobs:
      - test_unit:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^feature-.*/

  on_feature_PR_workflow:
    jobs:
      - test_instrumented:
          filters:
            branches:
              only:
                - develop
          pull_request: true
      - deploy_crashlytics:
          filters:
            branches:
              only:
                - develop
          pull_request: true
          requires:
            - test_instrumentation


  on_push_on_develop_workflow:
    jobs:
      - test_unit
      - test_instrumented:
          filters:
            branches:
              only:
                - develop
          requires:
            - test_unit
      - deploy_crashlytics:
          filters:
            branches:
              only:
                - develop
          requires:
            - test_instrumentation
      - sonarqube_build:
          filters:
            branches:
              only:
                - develop
          requires:
            - test_instrumentation
      - deploy_app_firebase_dist:
          filters:
            branches:
              only:
                - develop
          requires:
            - test_instrumentation


  on_release_workflow:
    jobs:
      - test_unit:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^release-.*/
      - deploy_app_firebase_dist_production_version:
          filters:
            branches:
              ignore: /.*/

           tags:
                  only: /^release-.*/
          requires:
            - test_unit



  on_master_pr_workflow:
    jobs:
      - test_unit
      - test_instrumented:
          filters:
            branches:
              only:
                - master
          pull_request: true
          requires:
            - test_unit
      - deploy_crashlytics:
          filters:
            branches:
              only:
                - master
          pull_request: true
          requires:
            - test_instrumentation
      - sonarqube_build:
          filters:
            branches:
              only:
                - master
          pull_request: true
          requires:
            - test_instrumentation
      - deploy_app_firebase_dist:
          filters:
            branches:
              only:
                - master
          pull_request: true
          requires:
            - test_instrumentation
      - deploy_play_store:
          filters:
            branches:
              only:
                - master
          pull_request: true
          requires:
            - test_unit
            - test_instrumentation
            - deploy_crashlytics
            - sonarqube_build
            - deploy_play_store
        #      - test_instrumented:
        #          filters:
        #            branches:
        #              only:
        #                - develop
        #              pull_request: true


        #      - build_debug
        #      - test_instrumented:
        #          requires:
        #            - build_debug

        #      - test_unit_sonar
        #      - sonarqube_build:
        #           requires:
        #              - test_unit
        #              - test_unit_sonar
        #            context: SonarCloud
        #      - test_instrumentation:
        #          requires:
        #            - test_unit
        #      - deploy_app_center:
        #          requires:
        #            - test_unit
        #      - deploy_crashlytics:
        #          filters:
        #            branches:
        #              only:
        #                - beta
        #          requires:
        #            - test_unit
        #            - test_instrumentation
        #      - deploy_play_store:
        #          filters:
        #            branches:
        #              only:
        #                - production
        #          requires:
      #            - test_unit
#            - test_instrumentation